{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","startValue","all","filterReducer","toLowerCase","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","filtered","title","includes","active","completed","length","className","map","id","classNames","onClick","actionsCurrentTodo","TodoFilter","useState","setQuery","onSubmit","event","preventDefault","onChange","actionsFilter","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","loading","setLoading","useEffect","userId","response","finally","href","email","name","App","loader","setLoader","actionsTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sDCgBCC,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAGED,EAPM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,iBDjCDN,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEkBZ,IAUaC,EAVK,SAACO,GAAD,MAAsC,CACtDL,KAAM,gBACNC,QAASI,IAQEP,EALI,SAACQ,GAAD,MAAoC,CACnDN,KAAM,eACNC,QAASK,IAKLC,EAAoB,CACxBD,MAAO,GACPD,OAAQR,EAAOW,KAyBFC,EAtBO,WAGhB,IAFJN,EAEG,uDAFYI,EACfH,EACG,uCACH,OAAQA,EAAOJ,MACb,IAAK,gBACH,OAAO,2BACFG,GADL,IAEEE,OAAQD,EAAOH,UAGnB,IAAK,eACH,OAAO,2BACFE,GADL,IAEEG,MAAOF,EAAOH,QAAQS,gBAG1B,QACE,OAAOP,I,QC5CAL,EALD,SAACa,GAAD,MAAoC,CAC9CX,KAAM,gBACNC,QAASU,IAaIC,EARM,WAAyD,IAAxDD,EAAuD,uDAAvC,GAAIP,EAAmC,uCAC3E,MAAoB,kBAAhBA,EAAOJ,KACH,GAAN,mBAAWW,GAAX,YAAqBP,EAAOH,UAGvBU,GCRHE,EAAcC,0BAAgB,CAClCC,YAAab,EACbc,OAAQP,EACRE,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,6CCfPC,EAAoCC,IACpCC,EAAkDC,I,OCElDC,EAAqB,WAChC,IAAMf,EAAQa,GAAe,SAAArB,GAAK,OAAIA,EAAMQ,SACtCK,EAASQ,GAAe,SAAArB,GAAK,OAAIA,EAAMa,UACvCD,EAAcS,GAAe,SAAArB,GAAK,OAAIA,EAAMY,eAC5CY,EAAWL,IAEXM,EAAgBC,mBAAQ,WAC5B,IAAMC,EAAWd,EAAOV,MACpBK,EAAMK,QAAO,SAAAjB,GAAI,OAAIA,EAAKgC,MAAMrB,cAAcsB,SAAShB,EAAOV,UAC9DK,EAEJ,OAAQK,EAAOX,QACb,KAAKR,EAAOoC,OACV,OAAOH,EAASd,QAAO,SAAAjB,GAAI,OAAKA,EAAKmC,aAEvC,KAAKrC,EAAOqC,UACV,OAAOJ,EAASd,QAAO,SAAAjB,GAAI,OAAIA,EAAKmC,aAEtC,QACE,OAAOJ,KAEV,CAACd,EAAQL,IAEZ,OACE,mCACIiB,EAAcO,OAKd,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGR,EAAcS,KAAI,SAAAtC,GACjB,IAAQuC,EAAyBvC,EAAzBuC,GAAIP,EAAqBhC,EAArBgC,MAAOG,EAAcnC,EAAdmC,UAEnB,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAIE,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGF,GACC,sBAAME,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IAAW,CACvB,mBAAoBL,EACpB,mBAAoBA,IAFtB,SAKGH,MAIL,oBAAIK,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVpC,KAAK,SACLwC,QAAS,kBAAMb,EAASc,EAA2B1C,KAJrD,SAME,sBAAMqC,UAAU,OAAhB,SACGE,KAAE,OAAKvB,QAAL,IAAKA,OAAL,EAAKA,EAAauB,IACnB,mBAAGF,UAAU,qBAEb,mBAAGA,UAAU,uBA/BCE,WAzBhC,mBAAGF,UAAU,0BAAb,oEC3BKM,EAAuB,WAClC,MAA0BC,mBAAS,IAAnC,mBAAOrC,EAAP,KAAcsC,EAAd,KACMjB,EAAWL,IAgBjB,OACE,uBACEc,UAAU,mBACVS,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGX,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRY,SAvBiB,SAACF,GAC1BnB,EAASsB,EAAwBH,EAAMI,OAAOC,SAoBxC,UAIE,wBAAQA,MAAOtD,EAAOW,IAAtB,iBACA,wBAAQ2C,MAAOtD,EAAOoC,OAAtB,oBACA,wBAAQkB,MAAOtD,EAAOqC,UAAtB,8BAKN,oBAAGE,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRpC,KAAK,OACLoC,UAAU,QACVgB,YAAY,YACZD,MAAO7C,EACP0C,SAnCe,SAACF,GACtBnB,EAASsB,EAAuBH,EAAMI,OAAOC,QAC7CP,EAASE,EAAMI,OAAOC,UAmClB,sBAAMf,UAAU,eAAhB,SACE,mBAAGA,UAAU,gCAGZ9B,GACD,sBAAM8B,UAAU,gBAAgBiB,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,UAAQ,oBACRtD,KAAK,SACLoC,UAAU,SACV,aAAW,qBACXI,QA3Ca,WACvBb,EAASsB,EAAuB,KAChCL,EAAS,gBCjBAW,G,MAAmB,kBAC9B,qBAAKnB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASoB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,IAAMpE,EAAOyB,GAAe,SAAArB,GAAK,OAAIA,EAAMY,eACrCY,EAAWL,IACjB,EAAwBqB,mBAAsB,MAA9C,mBAAOyB,EAAP,KAAaC,EAAb,KACA,EAA8B1B,oBAAS,GAAvC,mBAAO2B,EAAP,KAAgBC,EAAhB,KAUA,OARAC,qBAAU,WDUW,IAACC,ECThB1E,IDSgB0E,ECRV1E,EAAK0E,ODQwBjB,EAAG,iBAAiBiB,KCPtDV,MAAK,SAAAW,GAAQ,OAAIL,EAAQK,MACzBC,SAAQ,kBAAMJ,GAAW,QAE7B,IAGD,mCACGxE,GACC,sBAAKqC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdkC,GAAW,cAAC,EAAD,IAEXF,GACC,sBAAKhC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYrC,EAAKuC,MAGjB,wBACEtC,KAAK,SACLoC,UAAU,SACV,UAAQ,cACR,aAAW,cACXI,QAAS,kBAAMb,EAASc,WAI5B,sBAAKL,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SAA4CrC,EAAKgC,QAEjD,oBAAGK,UAAU,QAAQ,UAAQ,aAA7B,UACGrC,EAAKmC,UACJ,wBAAQE,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGDgC,GACC,qCACG,OACD,mBAAGQ,KAAI,wBAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,OAAzB,gBAAmCT,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMU,yBCjDlDC,EAAgB,WAC3B,MAA4BpC,oBAAS,GAArC,mBAAOqC,EAAP,KAAeC,EAAf,KACMtE,EAAQa,GAAe,SAAArB,GAAK,OAAIA,EAAMQ,SACtCI,EAAcS,GAAe,SAAArB,GAAK,OAAIA,EAAMY,eAC5CY,EAAWL,IAUjB,OARAkD,qBAAU,WFGkBhB,EAAY,UEDnCO,MAAK,SAACF,GACLlC,EAASuD,EAAiBrB,OAE3Bc,SAAQ,kBAAMM,GAAU,QAC1B,IAGD,qCACE,qBAAK7C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEC4C,GAAU,cAAC,EAAD,MAERrE,EAAMwB,QACP,qCACE,qBAAKC,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,gBAQXrB,GAAe,cAAC,EAAD,QCzChBoE,EAAO,kBACX,cAAC,IAAD,CAAUlE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNmE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.2880fd36.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/STATUS';\n  payload: string;\n};\n\ntype SetQueryAction = {\n  type: 'filter/QUERY';\n  payload: string;\n};\n\ntype Action = SetStatusAction | SetQueryAction;\ntype State = {\n  query: string;\n  status: string;\n};\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nexport const actions = { setStatus, setQuery };\n\nconst startValue: State = {\n  query: '',\n  status: Status.all,\n};\n\nconst filterReducer = (\n  state: State = startValue,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload.toLowerCase(),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'loadTodos/SET', payload: Todo[] };\n\nconst set = (todos: Todo[]): SetTodosAction => ({\n  type: 'loadTodos/SET',\n  payload: todos,\n});\n\nexport const actions = { set };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodosAction): Todo[] => {\n  if (action.type === 'loadTodos/SET') {\n    return [...todos, ...action.payload];\n  }\n\n  return todos;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = useMemo(() => {\n    const filtered = filter.query\n      ? todos.filter(todo => todo.title.toLowerCase().includes(filter.query))\n      : todos;\n\n    switch (filter.status) {\n      case Status.active:\n        return filtered.filter(todo => !todo.completed);\n\n      case Status.completed:\n        return filtered.filter(todo => todo.completed);\n\n      default:\n        return filtered;\n    }\n  }, [filter, todos]);\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr data-cy=\"todo\" key={id}>\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames({\n                      'has-text-danger': !completed,\n                      'has-text-success': completed,\n                    })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(actionsCurrentTodo.setTodo(todo))}\n                    >\n                      <span className=\"icon\">\n                        {id === currentTodo?.id ? (\n                          <i className=\"far fa-eye-slash\" />\n                        ) : (\n                          <i className=\"far fa-eye\" />\n                        )}\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const dispatch = useAppDispatch();\n\n  const handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actionsFilter.setStatus(event.target.value));\n  };\n\n  const handleSetQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actionsFilter.setQuery(event.target.value));\n    setQuery(event.target.value);\n  };\n\n  const handleClearQuery = () => {\n    dispatch(actionsFilter.setQuery(''));\n    setQuery('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleChangeStatus}\n          >\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSetQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete search text\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const todo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (todo) {\n      getUser(todo.userId)\n        .then(response => setUser(response))\n        .finally(() => setLoading(false));\n    }\n  }, []);\n\n  return (\n    <>\n      {todo && (\n        <div className=\"modal is-active\" data-cy=\"modal\">\n          <div className=\"modal-background\" />\n\n          {loading && <Loader />}\n\n          {user && (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${todo.id}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  aria-label=\"close modal\"\n                  onClick={() => dispatch(actionsCurrentTodo.removeTodo())}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {todo.completed ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                  {user && (\n                    <>\n                      {' by '}\n                      <a href={`mailto:${user?.email}`}>{user?.name}</a>\n                    </>\n                  )}\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as actionsTodos } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [loader, setLoader] = useState(true);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getTodos()\n      .then((resolve) => {\n        dispatch(actionsTodos.set(resolve));\n      })\n      .finally(() => setLoader(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            {loader && <Loader />}\n\n            {!!todos.length && (\n              <>\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}